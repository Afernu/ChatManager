@model IEnumerable<ChatManager.Models.Chat>
@{
    ViewBag.Title = "UserList";
    var currentUser = ChatManager.Models.OnlineUsers.GetSessionUser();
    var friendships = ChatManager.Models.Friendships.ListFriend;
    var user = ChatManager.Models.DB.Users;
    var chat = ChatManager.Models.DB.Chat;
    DateTime previousTime = DateTime.MinValue;
    var login = ChatManager.Models.DB.Logins;

}

@if (Model != null)
{
    var lastSeenTime = login.Get(currentUser.Id).LogoutDate;

    if ((int)Session["CurrentId"] == 0)
    {
        <div class="messagesHeader">
            <h4>Selectionner un ami...</h4>
        </div>
    }
    else
    {
        <div class="messagesHeader">
            <h4>Conversation avec</h4>
            <div class="userItem">
                @Helper.AvatarUser(user.FindUser((int)Session["CurrentId"]), "UserMediumAvatar")
            </div>
        </div>

        foreach (var item in Model)
        {

            if (item.EnvoyeurId == currentUser.Id)
            {
                if (item.MessageDate.Date != previousTime.Date)
                {
                    <div class="messageTime">
                        @item.MessageDate.ToString("dd MMM yyyy - HH:mm")
                    </div>
                    previousTime = item.MessageDate;
                }

                <div class="sentLayout">
                    <div class="sent" title="@item.MessageDate.ToShortTimeString()" id="sent_@item.Id" utc="@item.MessageDate.ToFileTimeUtc()">
                        <span class="token">@Helper.ParseContent(@item.Message)</span>
                    </div>
                </div>
                <div class="editMessage" id="edit_@item.Id" style="display: none;">
                    <input id="@item.Id" value="@item.Message" class="sent form-control">
                    <span id="update_@item.Id" class="icon fa fa-check smallerIcon" title="Modifier ce message" data-placement="bottom"></span>
                    <span id="delete_@item.Id" class="icon fa fa-times smallerIcon" title="Effacer ce message" data-placement="bottom"></span>
                </div>
            }
            else
            {
                if (item.MessageDate.Date != previousTime.Date)
                {
                    <div class="messageTime">
                        @item.MessageDate.ToString("dd MMM yyyy - HH:mm")
                    </div>
                    previousTime = item.MessageDate;
                }
                <div class="receivedLayout">
                    <div class="received" title="@item.MessageDate.ToShortTimeString()">
                        <span class="token">@Helper.ParseContent(@item.Message)</span>
                    </div>
                    @if (item.MessageDate > lastSeenTime)
                    {
                        <div class="readIndicator" title="Nouveau message depuis dernière connexion"></div>
                    }
                </div>
            }
        }
    }
}

